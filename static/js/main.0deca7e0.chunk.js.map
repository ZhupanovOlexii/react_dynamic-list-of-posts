{"version":3,"sources":["api.tsx","User.tsx","Comment.tsx","CommentList.tsx","Post.tsx","PostList.tsx","App.tsx","index.tsx"],"names":["getPreparedPosts","a","Promise","all","fetch","then","response","json","postFromServer","usersFromServer","commentsFromServer","map","post","user","find","id","userId","comments","filter","comment","postId","User","className","name","address","city","street","suite","href","email","Comment","body","CommentList","key","Post","title","PostList","posts","App","useState","setPosts","isloading","setLoading","query","setQuery","errorMessage","setErrorMessage","loadPosts","preparedPosts","filteredposts","useMemo","toLowerCase","includes","trim","length","type","placeholder","onChange","event","target","value","onClick","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.0deca7e0.chunk.js","sourcesContent":["const API_USERS_URL = 'https://jsonplaceholder.typicode.com/users';\nconst API_POSTS_URL = 'https://jsonplaceholder.typicode.com/posts';\nconst API_COMMENTS_URL = 'https://jsonplaceholder.typicode.com/comments';\n\n\nexport const getUsers = () => {\n  return fetch(API_USERS_URL)\n    .then(response => response.json());\n};\n\nexport const getPosts = () => {\n  return fetch(API_POSTS_URL)\n    .then(response => response.json());\n};\n\nexport const getComments = () => {\n  return fetch(API_COMMENTS_URL)\n    .then(response => response.json());\n};\n\nexport const getPreparedPosts = async () => {\n  const [postFromServer, usersFromServer, commentsFromServer] = await Promise.all([\n    getPosts(),\n    getUsers(),\n    getComments(),\n  ]);\n\n return postFromServer.map((post: Post) => ({\n    ...post,\n    user: usersFromServer.find((user: User) => user.id === post.userId),\n    comments: commentsFromServer.filter((comment: Comment) => comment.postId === post.id),\n  }));\n};\n","import React from 'react';\nimport './User.scss';\n\ntype UserProps ={\n  user: User;\n};\n\nconst User: React.FC<UserProps> = ({ user }) => (\n  <section className=\"user \">\n    <p className=\"user__name\">\n      {user.name}\n    </p>\n    <div className=\"user__address\">\n      <p className=\"user__city\">\n        {user.address.city}\n        ,\n      </p>\n      <p className=\"user__street\">\n        {user.address.street}\n        ,\n      </p>\n      <p className=\"user__suite\">\n        {user.address.suite}\n        ,\n      </p>\n      <a href={`mailto:${user.email}`} className=\"comment__email\">\n        {user.email}\n      </a>\n    </div>\n  </section>\n);\n\nexport default User;\n","import React from 'react';\nimport './Comment.scss';\n\nconst Comment: React.FC<Comment> = ({ name, body, email }) => (\n  <div className=\"comment\">\n    <p className=\"comment__name\">\n      {name}\n    </p>\n    <p className=\"comment__text\">\n      {body}\n    </p>\n    <p className=\"comment__email\">\n      <a href={`mailto:${email}`}>\n        {email}\n      </a>\n    </p>\n  </div>\n);\n\nexport default Comment;\n","import React from 'react';\nimport Comment from './Comment';\n\ntype CommentListProps = {\n  comments: Comment[];\n};\n\nconst CommentList: React.FC<CommentListProps> = ({ comments }) => (\n  <div className=\"comments\">\n    <h3>Comments</h3>\n    {comments.map(comment => (\n      <Comment {...comment} key={comment.id} />\n    ))}\n  </div>\n);\n\nexport default CommentList;\n","import React from 'react';\nimport User from './User';\nimport CommentList from './CommentList';\nimport './Post.scss';\n\nconst Post: React.FC<Post> = ({\n  title, body, user, comments,\n}) => (\n  <div className=\"post\">\n    <h2 className=\"post__title\">\n      {title}\n    </h2>\n    <User user={user} />\n    <p className=\"post__body\">\n      {body}\n    </p>\n    <CommentList comments={comments} />\n  </div>\n);\n\nexport default Post;\n","import React from 'react';\nimport Post from './Post';\n\ntype PostListProps = {\n  posts: Post[];\n};\n\nconst PostList: React.FC<PostListProps> = ({ posts }) => (\n  <>\n    <div className=\"post__list\">\n      {posts.map(post => (\n        <Post {...post} key={post.id} />\n      ))}\n    </div>\n  </>\n);\n\nexport default PostList;\n","import React, { useState, useMemo } from 'react';\nimport './App.scss';\nimport { getPreparedPosts } from './api';\nimport PostList from './PostList';\n\nconst App = () => {\n  const [posts, setPosts] = useState<Post[]>([]);\n  const [isloading, setLoading] = useState<boolean>(false);\n  const [query, setQuery] = useState('');\n  const [errorMessage, setErrorMessage] = useState('');\n\n  const loadPosts = async () => {\n    setLoading(true);\n    try {\n     const preparedPosts = await getPreparedPosts()\n     setPosts(preparedPosts);\n    } catch(e) {\n      setErrorMessage('Error, try again later')\n    }\n    setLoading(false);\n  };\n\n  const searchQuery = (event: React.ChangeEvent<HTMLInputElement>) => {\n    const target = event.target.value;\n    setQuery(target);\n  };\n\n  const filteredposts = useMemo(() => posts.filter(post => {\n    return(post.title + post.body).toLowerCase().includes(query.trim().toLowerCase());\n  }), [query, posts]);\n\n  return (\n    <div className=\"App\">\n      <h1>Dynamic list of posts</h1>\n      {!posts.length ? (\n        <>\n          <button\n            type=\"button\"\n            className=\"button\"\n            onClick={loadPosts}\n          >\n            {isloading ? 'Loading...' : 'Click to Load'}\n          </button>\n          {errorMessage && <p className=\"error\">{errorMessage}</p>}\n        </>\n      ) : (\n        <>\n          <input\n            type=\"text\"\n            className=\"input\"\n            placeholder=\"what you search\"\n            onChange={searchQuery}\n          />\n          <PostList posts={filteredposts} />\n        </>\n      )}\n    </div>\n  );\n};\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport App from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}